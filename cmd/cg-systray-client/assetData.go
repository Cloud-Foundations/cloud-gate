// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// data/checkmark-32x32.png
// data/crossmark-32x32.png
// data/exclamation-32x32.png
// data/favicon.ico
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCheckmark32x32Png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x83\x04\x7c\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x06\x00\x00\x00\x73\x7a\x7a\xf4\x00\x00\x04\x4a\x49\x44\x41\x54\x58\x47\x9d\x56\x5f\x68\x1c\x75\x10\xfe\xe6\x97\xa4\xad\x7f\x53\x2a\xa5\xfe\xed\x83\x44\x2d\x24\xde\xdd\xd6\x64\xd7\xe3\xee\x62\x8b\x55\xa8\x5a\xf4\x25\x0f\xad\xe0\x1f\xc4\x8a\x82\x88\x5a\x04\x1f\x54\x54\x7c\x12\x15\xf4\x41\x2d\x15\xf4\x25\x8a\x7d\x50\x0a\x46\x68\x29\xc6\xec\x25\xf1\xae\xb9\xec\xde\x25\x0d\x82\x41\x11\x45\x8a\x45\xa9\x4a\xa3\x49\x6e\x7f\x23\xbb\xcd\x6e\xf6\x7e\xb7\x7b\xb7\xd7\x7d\x39\xee\x76\xe6\x9b\x6f\x66\xbe\x99\x39\xc2\x45\x3c\x04\x80\x3b\xf4\xf3\x7d\xd2\xd9\xec\x75\x42\x76\xf7\x5a\x25\xf3\x7b\x00\xd2\xfd\x1d\xfe\xcb\x24\xc0\x61\x9b\x38\xfb\x38\x1b\x4d\x2f\xbc\x07\xf0\x53\x20\x12\x00\x6a\x0e\x56\xee\xf5\x08\xf8\x4f\x12\x02\x1d\x26\xee\x99\xbb\xb8\x69\x3d\xff\x10\x11\x7d\x12\xf6\x67\xe6\xd1\x80\x40\x27\x55\x68\x45\x22\x2a\x89\x01\xc3\xd8\xd6\x83\x0d\xa7\x01\x5c\xe5\xfa\xba\xed\x5b\x0b\x3c\xd7\x50\x01\x15\x58\x05\xf3\x8d\x3b\xed\x7f\x46\xcf\x7f\x4e\x44\x23\x3e\x7e\x40\x80\xf8\xa3\x96\x04\xe2\x32\x8d\x23\xe6\x67\x17\xf6\xcb\xe8\x85\x07\x88\xf0\x45\x13\x16\xe3\x1c\x56\x65\x7f\x13\x81\xa8\x12\x5e\xac\x36\x32\x99\x5d\x9b\x69\xa3\xe3\x96\xfe\x5a\x95\x00\x33\x1e\xb7\xcb\xe6\x91\xb6\x15\x48\xa2\xf4\xb8\xd6\x69\x7a\xfe\x08\x88\x1e\x6b\xca\x9e\x70\xd2\xfa\xce\xbc\xcb\x95\x43\x5b\x02\x49\xdb\xa0\xda\x65\x86\x0a\x77\x92\xc0\x89\x75\xbd\x05\x16\xe7\x57\x1d\x4e\xcd\xcf\x14\x7f\xf4\x27\x24\x56\xd4\x49\xdb\xa1\x4e\x50\x2a\x95\xba\x4c\x6c\xea\xad\x11\xe1\x46\x55\x78\x92\xf1\x5c\xb5\x6c\xbe\x13\x8c\x7e\xa7\xfd\x4d\xd2\x92\x8c\x5e\x78\x9b\x08\xcf\x36\xcc\xfc\x85\x2f\x25\x7b\xfb\xd5\x39\x1c\x3d\xea\x84\x77\x4f\xb0\x2c\xda\x8d\x57\x12\xb2\x3b\x8d\xdc\xed\x0c\x51\x04\xd0\xe5\x8f\x9b\xf7\xc9\x58\x76\xa4\x33\x38\x37\x33\x35\x1f\x8e\x93\x48\x03\x49\x02\xbb\x59\xdc\xd4\xd7\xb7\xf1\xf2\x2d\xd7\x54\x40\xe8\x8f\xe8\xeb\x2b\x56\xc9\x7c\x4d\xcd\x3c\x11\x01\x5f\x2c\x2a\x73\xb5\x62\x69\x23\xf7\xaa\x80\x78\x39\x22\xf8\xdc\xf2\x3f\x7f\x0c\x2e\x2c\x2c\xac\x44\x4d\x4c\xc4\x94\x24\xbf\x76\x7e\x75\x6e\xcb\x0e\xdf\x2a\xa5\x9c\x01\x68\x83\x02\x58\x97\x0e\x72\xd5\x19\xb3\x1c\xfe\x3d\x2c\xdc\xe0\x1a\x46\x19\x84\x4b\x16\xa5\x11\x0f\x68\x64\xa4\x4b\xfb\xf9\xcc\x34\x08\x43\xfe\x36\x5c\x2f\x2d\xbf\x65\x95\x8a\x87\xc2\x55\x54\xaf\x65\xe4\x18\x76\x32\x82\x69\x23\x77\x88\x20\xde\x8c\x00\x5a\x14\xf5\xa5\x74\xa5\x52\x59\x6a\xb5\x4f\xd0\x9f\xcd\x6e\xe9\xa9\xf7\xec\x65\x92\x4b\xe7\xff\xbc\x62\x6c\x71\xf1\xeb\xe5\xb8\xed\xa6\x1e\xa4\x9d\xd9\x6c\x9f\x94\x5d\x55\x02\x5d\xaa\xf8\x48\x09\xb9\xa7\x5a\x9a\xfc\x26\xbc\x70\xfc\x2a\x06\x2d\x48\xeb\xf9\x9b\x89\x30\x41\xa0\x6d\x6b\x00\x55\xac\xc8\x7b\x2c\x6b\xf2\xb7\xd8\x0d\xb5\xfe\x82\x32\x46\xfe\x24\x81\x76\xab\xb6\x0c\x3e\x6c\x97\x8a\x4f\xb4\xc3\x20\x4d\x2f\x7c\x0c\xc2\xc3\x8a\xe1\x4f\x24\xea\x77\xcf\x4e\x4f\x2f\xb6\x02\x48\x1b\xf9\x83\x02\xf4\xa1\xba\x70\x08\xf8\x55\xd4\x97\x06\x66\x2b\x95\xbf\xd4\x8c\x9b\xc6\x50\x33\x0a\x27\x18\xd8\x13\x31\x8f\x67\x58\x3a\x7b\xed\x53\x53\x76\x14\x89\x94\xb1\xeb\x7a\x01\x67\x9e\x80\x5e\xff\x7d\x70\xe7\x1d\x79\xbf\x35\x33\x79\xac\x5d\xf6\x5e\x6b\x34\xbd\xf0\x34\x08\xef\xaa\x20\x6b\xdb\xeb\x9c\x43\x72\x5f\xad\x34\xe9\x6e\xb6\x86\x47\xd3\x87\x8f\x81\x78\x5f\x73\xf6\xfc\x99\x55\x2a\xee\x4f\x12\xdc\xd7\x86\xc8\x18\xf9\xf7\x09\x74\x30\xca\x89\xc1\x4b\xee\xa0\xd9\xa5\xc9\x31\xff\xbd\xa6\xe7\xf7\x33\xd1\x68\x58\x5c\xde\xf8\x31\xce\xca\xff\x9c\x81\x5a\x6d\xea\xf7\x4e\x08\x5c\xa8\x84\x51\x78\x03\xc0\x8b\x31\x8e\xab\xcc\xfc\x48\xb5\x5c\x1c\xcd\x68\x85\xad\xe8\xc1\x69\x10\xb6\x7a\x41\x43\xf7\x96\x99\x1f\xb4\xcb\x45\x8f\x58\xd2\xa7\xa1\xf5\xda\x50\xfe\x79\x08\x72\xe7\xb9\x49\x12\xcc\x2c\x19\xf4\x0c\x81\xb3\x44\x74\x40\x2d\x3d\x18\x5f\xd9\x65\xf3\x3e\x35\x70\xbb\x3b\x12\x04\xf2\x0d\xd3\x46\xfe\x51\x01\x3a\x0c\xa0\x3b\x9c\xdd\x1a\x70\x58\xd4\x41\x2c\x06\xff\x5d\x97\x62\x60\xfe\xd4\xc4\x2f\xad\x32\x8f\x5b\x6e\x9e\x4f\xf8\xe5\xda\x1f\xc9\x4f\x01\x6c\x8a\x03\x6c\x38\x4c\x8c\x27\xad\xb2\xf9\x81\xba\xa4\xda\x65\xaf\x6a\xa8\x21\x56\xda\xb8\x63\xb7\x80\xf3\x25\x40\x57\xb6\xec\x27\xe3\x5b\xab\x6c\xba\x8b\x28\xe0\x94\x24\xb0\x8f\xd9\xf2\x1c\x6b\x7a\x6e\x10\x10\x63\xbe\xe0\x22\x88\xfc\xcb\xa0\xb4\x5d\x9a\xf8\x21\x8e\x64\x3b\x32\x1e\x81\x56\x46\xa9\xc1\xdc\x2d\xa2\x5b\x1c\x27\xc6\x76\x55\x13\xcc\x78\xc1\x2e\x9b\x51\x47\xa8\x65\xd1\x9a\xae\xa1\xda\x3b\xd5\x7b\x60\x68\xf8\x86\x1e\x21\x8f\x03\xb4\x23\xf4\x37\xab\xbc\xf9\x92\xae\xdc\xf8\xf8\x78\x3d\x9c\x44\x2b\xa1\x45\x9e\xf3\x76\x25\xf2\xc9\x78\x17\x53\x76\xbd\x0e\xa6\x21\x02\xcf\xf2\x2a\xbd\x64\x5b\xe6\xd9\x4e\x4a\x1f\x15\xeb\x7f\x4e\xb7\x8e\xa0\x22\xdc\xda\x8e\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xfb\xb3\x20\x97\x83\x04\x00\x00")

func dataCheckmark32x32PngBytes() ([]byte, error) {
	return bindataRead(
		_dataCheckmark32x32Png,
		"data/checkmark-32x32.png",
	)
}

func dataCheckmark32x32Png() (*asset, error) {
	bytes, err := dataCheckmark32x32PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/checkmark-32x32.png", size: 1155, mode: os.FileMode(493), modTime: time.Unix(1601324113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCrossmark32x32Png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x03\x04\xfc\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x06\x00\x00\x00\x73\x7a\x7a\xf4\x00\x00\x03\xca\x49\x44\x41\x54\x58\x47\x9d\x57\x4b\x4e\x1b\x41\x10\x7d\x35\x5c\x00\xe7\x04\xc1\x24\xbb\xcc\x58\x82\x48\x89\x10\xab\xd8\x2c\x72\x00\x92\x45\xf8\x19\x23\xe5\xa3\x24\xca\x0d\x2c\x4e\x10\x29\x28\x4a\x16\xd8\x60\x9b\x15\x9c\x20\x01\xef\x90\x37\x01\x22\xc6\xec\x82\x4d\x4e\x10\xb8\x00\x53\x51\xf7\xb8\x87\x76\x4f\xcf\x8c\xc1\xbb\x19\x77\x77\xbd\x7a\xf5\xea\x55\x0f\xc1\xf8\x11\x00\x1e\xe1\x9d\x58\x62\xae\xb5\xed\x35\xcf\xb7\xc5\x93\xef\x7a\x6e\xf1\x15\x80\xe7\x20\x74\x26\xfc\xf6\x77\x07\x08\xd2\x0e\x4c\xfa\x2f\xe9\x3d\x03\xce\xb9\x5b\x7c\x3b\x06\x3c\xbd\x66\xfc\x78\x78\xd6\xde\x91\x49\x88\x0d\xbd\xc2\xdc\x22\x33\x37\x23\x74\xc4\xdb\xf9\xd3\x76\x45\x80\xd0\xd9\x10\x6b\xc5\xcf\x64\x28\x2b\xcb\x00\x55\xa7\xef\x75\xea\x04\x5e\x56\x6b\x89\x68\x29\x7f\xba\xdf\x92\x67\xf6\xdd\x62\x2b\x20\x5a\x50\x01\xc2\x28\xbc\x9d\xef\xce\x56\x08\xeb\x81\x2d\x80\x0d\x8c\x2d\xfb\x5d\xcc\x8f\x4d\x79\x57\x35\x3d\xb8\xcc\x9c\x79\x27\xdf\x6d\x2f\x4a\x06\xfe\x3c\x2a\x7d\x80\x83\x2f\x43\x00\x24\x06\x01\x22\x64\x62\x14\xad\x98\x6b\x18\x55\xe7\xc2\xeb\xd4\x19\xbc\x2c\x58\xd3\xcf\xe7\x00\x1f\x1f\x9c\x1d\x6c\x48\x00\x01\xe0\xf4\x0b\xc5\x1a\x98\x56\x62\xd9\x32\xb6\xf2\xdd\x83\x35\xb2\x80\x48\xa3\x5e\x64\xfe\xd8\xbb\xaa\x89\xe0\x71\x60\xd4\x98\xf4\xf7\x57\xc5\x99\x11\x28\x21\x92\xbe\x5b\xac\x81\x68\xc5\x44\x0b\xc6\xd6\x44\xf7\x60\xcd\x64\x22\x49\x70\xd9\xc1\x67\x56\x1d\xac\x4b\x7d\x0d\x97\x1d\x55\xa7\xe7\x1e\xd6\x88\xee\xce\x84\x4e\x7b\xbc\x6c\xd4\x38\xf2\xc7\x2b\x2f\xb0\x77\xad\xda\x58\x02\xd0\x33\x11\xe5\xb8\x70\x4b\x9b\x4c\x28\x9b\x9a\x10\x4c\xd8\xca\xa1\xf6\xeb\x99\x9b\xd9\x11\xa8\x31\xe1\xcf\xac\x9a\xa2\x8e\xc5\x18\xb4\x99\xd3\x77\x4b\x9b\x20\x94\xe3\x9a\x08\x85\x69\x6a\x42\x65\x1e\x80\x97\xcd\x43\x45\x70\x3d\xf3\xa8\x15\xcd\x12\xe8\xc1\x42\x4d\xc4\x99\x90\x99\x0d\xba\x43\x81\xb8\x0d\xed\x89\x4e\x68\x53\xb4\x02\x91\xcc\xc4\x6c\x25\x74\xd1\xc3\x3a\x11\x49\xb5\xeb\xd4\x3b\xa0\xc6\x7d\x0b\xed\x7a\xac\x98\x06\x4c\x65\x0b\x10\x3d\xb7\x18\x09\x73\xa8\xb6\xcc\xdb\xf2\x30\x43\xb4\x62\x8d\x08\x6e\xa3\x5d\xa7\x3f\xd6\x05\x49\x7d\xad\xb7\x68\x96\xed\x86\xa2\x8e\x0b\x2e\x6d\x76\x44\x67\xa6\x0d\x1f\x05\x82\x89\x56\xac\xca\x1d\x9c\xc2\xcc\x8d\xc9\xee\x6c\xd4\xe7\x69\x80\xc5\x39\x69\x67\x59\x4c\xb1\xea\xf4\xdd\xc3\x21\xb3\x32\x4b\x62\xce\x8f\xa4\xf1\x6e\xea\x25\x11\xa8\x3e\x74\x84\xda\x15\x00\xb5\x21\x0b\x40\x56\xc9\x46\x62\x20\x9a\x17\x6e\xb1\x36\x6a\x09\x84\xe1\xa8\xec\xd3\x4a\x6b\x05\x60\xed\x04\x6f\x2e\x9a\xe7\x59\xea\x35\x45\x98\x09\x40\x5f\x10\x0f\x9e\x3c\x1f\x08\x68\x06\xe1\xa5\x66\xd1\xe6\xfb\xc7\xfe\x78\x65\x7e\xe0\xfb\xa6\xe5\xeb\xec\x24\x76\x81\xad\xe6\x5a\x1f\x37\x8f\xfc\xdc\xaa\x78\x9e\xf2\x2e\xb7\x4c\x10\xca\x0b\x6c\xfe\x1f\x33\x22\xbb\x0b\x56\x9d\x9e\x77\x58\x07\x28\xf2\x76\x75\x15\x73\x00\x19\x5c\x4d\xb5\xf0\xd6\x13\x07\xa1\x3c\x41\x18\xd2\x4b\xec\x5d\xab\xd2\xd9\xae\x79\x43\x18\xcc\x79\x6e\xd4\xbc\x79\xac\x05\x57\x1b\x47\x01\xa1\x00\xa7\x32\x30\x38\xa8\x0e\x60\xc9\xa2\x8d\xe6\xc9\x20\xb8\x4d\x58\x26\x08\x95\x69\x68\x38\x23\x8c\xe3\x3d\xcc\x8f\x4d\x7b\x97\x75\x06\x96\x2c\x53\x2b\xa2\xdd\x0c\xae\x3f\xdb\x98\x50\x0c\xda\xc6\x72\xd4\x86\x36\xf4\x9a\x09\xb5\x7e\xfb\xb9\xb2\xae\xe8\xa4\xb1\x2a\x82\x25\x95\x23\x64\x44\xdc\x07\x6f\x2e\x26\x32\x86\xd8\x30\xed\xfe\xdb\x06\xd1\x82\x79\x30\x03\xad\x13\x3f\x57\x16\xf5\x4b\xeb\x67\x73\x5f\xa8\x23\x3b\x9b\x2c\x41\x68\x97\xd2\x9e\x57\xfa\x04\xe0\xb3\x25\xab\xd6\xd1\x20\x78\x96\xa5\xea\x63\x56\xf9\xbc\xd2\x13\xd9\x4a\xca\xfc\x3e\xdf\x6d\x7f\x95\x0c\x9c\xbb\xc5\x5d\x22\x9a\xd7\x83\x38\x40\xeb\x97\x9f\x2b\xab\xf6\x19\x15\x80\x9d\x89\x9b\xeb\x79\xa4\x07\xfd\xc3\xe4\xbc\x30\xf7\x06\xcc\xdf\xa2\xcd\xcc\x3b\xc7\xdd\x7b\x2b\xfa\xed\x55\x65\x75\x17\x20\xc2\xd0\xfe\x7a\x9d\xba\xb8\x2f\x46\x4c\xa9\x4f\xb3\xc1\xa0\xa1\x5e\x61\xee\x35\x82\xe0\x19\x11\x75\x8e\xfd\xdc\x46\x56\xe6\x59\xfe\x6e\x7e\x3f\x8a\xfb\xc4\x85\x5b\x7a\x07\xf0\x13\x38\xce\x4f\xf1\x5d\x28\x25\x69\x7a\xf2\x6d\x3f\x3c\x4d\x8f\xb7\x75\x87\xcd\x01\xd5\xba\xff\x64\x0d\x17\x42\x60\x41\x9d\xfe\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xd9\x69\xfe\xce\x03\x04\x00\x00")

func dataCrossmark32x32PngBytes() ([]byte, error) {
	return bindataRead(
		_dataCrossmark32x32Png,
		"data/crossmark-32x32.png",
	)
}

func dataCrossmark32x32Png() (*asset, error) {
	bytes, err := dataCrossmark32x32PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/crossmark-32x32.png", size: 1027, mode: os.FileMode(493), modTime: time.Unix(1601324150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataExclamation32x32Png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xc8\x02\x37\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x06\x00\x00\x00\x73\x7a\x7a\xf4\x00\x00\x02\x8f\x49\x44\x41\x54\x58\x47\xbd\x57\x3d\x6f\x13\x41\x10\x9d\x89\x45\x93\x26\x50\x71\x76\x4d\x41\x13\xc9\xd6\xf1\x07\xec\x24\x7d\x9a\x04\x04\x12\x82\x2a\x15\xe9\x93\x2a\x15\xf4\xa1\x4a\x05\x42\x4a\x04\xa4\xa1\xc6\x5c\x42\x1f\x9d\x7c\x52\x1a\x0a\xea\xf8\xa8\x20\x0d\x4d\x64\x0f\x9a\xb3\xd7\xda\x5b\xcf\x7e\x19\xc4\x55\xe7\xf5\xcc\xec\x9b\x37\x6f\x66\x6f\x11\xfe\xd3\x83\x00\x40\xc2\x5e\xbc\x6e\x7d\x6c\x4e\xca\xe1\xbc\x95\xde\xe7\xf7\xee\x55\xfe\x6d\xd1\x3c\x2a\x00\xbe\x8d\xcc\xe0\x79\x2b\x5d\xfe\x45\xa3\x4f\x08\xb8\xc1\xbe\x63\xa0\xfe\x0a\x36\x36\x1f\x5c\xe5\xbf\x43\x80\xa8\xac\x99\x91\x1a\x03\x12\x10\x69\xed\xac\xd9\xde\x03\xc0\x97\x6a\xb3\x49\x10\xda\xef\x0e\x8b\x57\x12\x00\x33\x86\xfe\xdb\x59\x02\x33\x98\x32\xce\x92\xce\x7b\x40\x78\x58\x0b\x4c\xf0\xa1\x57\x0e\x1e\xc5\x96\x34\xba\x04\xec\xf0\x25\x69\x7f\x44\xc4\x2d\x7d\x33\x22\x3a\x5d\x2b\x8b\x6d\x9d\x15\x49\x74\xb6\xa4\xaa\x75\x17\x55\xba\x63\xe6\x01\xa0\xd7\xd8\xc7\x88\xa8\x01\x9f\x28\x19\xc0\x12\xe2\x96\x9e\xa1\xc9\x40\x88\x16\x54\xd2\x21\xc2\xad\xd9\xd8\x18\x58\x2f\x8b\x6d\x1b\xed\x0b\xcd\x01\xa9\x5e\xbc\x81\x0e\x40\x05\x0e\x61\xc0\xc6\xca\x6c\xdd\x45\xbd\xfe\x9f\x4f\x03\xa6\x9e\x94\xaf\xad\xcd\xe7\x80\xb9\x1c\xd8\x78\x91\x12\xb8\x40\xfd\xb5\x06\xaa\x69\x68\xb4\xa1\x2d\xa8\xd4\x69\x51\x00\x38\x40\x7f\xda\x05\xae\x39\x10\x0d\xc0\xd7\x7a\x31\x73\x20\x26\x23\x0c\x9d\xff\x31\x00\x7c\x31\x83\xce\x02\x17\x23\x8b\x8a\x50\x12\xa2\xf5\x30\x8a\x01\xc0\xb6\x23\xa2\x53\x1e\x44\x3e\xfa\x83\x44\xe8\x9b\xe5\xbe\x39\x10\x3a\x4f\xc4\x51\x1c\x22\x46\x05\x40\xb7\xe5\x49\x28\x8d\x62\x5f\x3c\x6b\x09\x5c\x54\xfa\x18\xd0\x7d\xff\x39\x00\x0e\x78\xd6\x6c\x1f\x13\xe0\xe3\xfa\xd9\x4f\x27\xbd\x61\xf1\x44\x3a\xd6\x5d\x33\x21\x88\x01\x33\x8b\x2c\x69\x3f\x43\xc4\x37\xc6\x20\x7a\xbe\x56\x16\x6f\xeb\xa0\x26\xbf\x7c\x9a\x10\x0d\x5c\x4e\x63\x00\xfc\x9a\x74\x0e\x00\x61\xb7\xb2\x23\x38\xec\x96\x83\x03\x94\xbf\xbc\xad\x67\xcd\x9c\x08\x5d\xa7\x55\xe8\xe7\x55\x88\x9d\xa9\x91\x19\x4d\xfc\x12\xf3\x41\x71\xde\x5a\x9d\xde\x0b\x2e\x6b\xf7\x02\x9f\xf0\x44\x00\x52\xed\x24\xf1\x70\xf0\x8b\x56\xba\x7c\x3d\xbd\x17\x4c\x40\x53\xff\x36\x36\x36\x53\xed\x5e\x20\x0d\x1c\x33\x39\xb6\x99\x13\xa1\x6f\x08\xf1\x86\xd2\xbd\x80\x80\xf6\x7b\x96\x7b\x81\xab\xa5\xab\xfd\xcc\xc3\xc1\x76\x87\x53\x37\x99\xac\xd9\x39\x06\x80\x59\x1b\x4e\x37\x38\xe9\x0d\x07\x55\x1b\xea\xe2\xf2\x69\xa2\xc6\x40\x68\xed\xb2\xbb\x9d\x17\xb8\x04\x87\x7a\x66\xe3\x31\xec\xae\xff\x18\xbc\xf6\xb5\x9d\x59\xea\xb9\xe3\x38\xa4\x04\x47\x90\xde\xba\x97\x8c\x8e\x10\xf1\x69\xa5\x01\xa2\x77\xdf\xcb\xc6\xce\x0e\xe4\x37\x21\x6c\xea\x0c\xcd\x18\xf0\x65\x2f\x01\xfb\x7c\x27\x5d\xe1\xf5\x8d\x9f\xf9\xb5\x59\x67\x5b\x4b\x9b\x25\xf9\x03\xa4\x68\x3b\x35\x34\xe8\x37\x56\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x37\x7b\x7b\xf7\xc8\x02\x00\x00")

func dataExclamation32x32PngBytes() ([]byte, error) {
	return bindataRead(
		_dataExclamation32x32Png,
		"data/exclamation-32x32.png",
	)
}

func dataExclamation32x32Png() (*asset, error) {
	bytes, err := dataExclamation32x32PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/exclamation-32x32.png", size: 712, mode: os.FileMode(493), modTime: time.Unix(1601323901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7d\x50\x5c\xd5\x15\x7f\x9d\xfa\x97\xd3\x99\xc6\xce\xf8\x8f\x53\xdd\x47\x8c\x91\x6a\x6d\x16\x76\xd9\xcd\xbe\xf7\xf6\x03\xd8\x65\x59\xd8\x5d\xb2\x9b\xdd\x65\xbf\xd8\xfb\xd4\xc4\x26\x4e\x9a\x8f\x26\x1a\x01\x01\x2b\x6d\x43\x1a\x0d\x29\x10\x68\x93\x0d\x74\x6c\x40\x6b\x28\x08\x24\x10\x48\x99\x66\x6a\x12\x83\xad\xfe\xd1\xce\xb4\xd5\x4e\x3b\x8e\xa5\x26\x56\x47\xad\xa8\x80\x89\x9e\xce\x3d\x0b\x3b\x10\xba\xc0\x2e\x8b\xaf\xdb\xbe\x37\xf3\x1b\xd8\xfb\xee\x79\xe7\x77\xcf\xfd\x3c\xe7\x1e\x86\xf9\x12\xf3\x65\x66\xcd\x1a\xfa\x97\x65\xb6\xdd\xc4\x30\x1a\x86\x61\x58\x36\xf6\x3b\xfb\x16\x86\x69\xbf\x89\x61\x94\xca\x99\xf7\xeb\x19\xe6\xd2\xad\x0c\x93\xcd\x30\xcc\x1a\x5a\x8f\x89\x95\x27\x7a\x08\xcf\xd6\x8a\x42\xd6\x94\x28\x64\x41\x92\x98\x12\x79\x45\x0d\xe1\xb3\xa6\x53\x90\x45\xac\x44\x36\x11\x42\xd6\x3c\xf0\x04\x3c\xe0\x77\xe6\x03\x99\x29\x0b\x9b\x37\x60\x59\xb0\x84\x87\xb0\x59\x99\x50\xd6\x1d\x09\x03\x1f\xbd\x0c\x25\x7b\xbf\x07\x96\xba\x56\x70\x57\x84\xc0\x25\x12\xe0\xa2\x97\xa1\xf8\xb1\x83\xa0\x3f\x3a\x0a\x9a\x67\xff\x92\x50\xde\x78\x64\x00\x82\xc5\xda\x79\x65\x42\xdb\x79\xa8\x28\xbc\x2f\xd6\x5e\xfd\x9d\xa0\xeb\x78\x25\xa1\xbc\xbe\x75\x14\x22\xc6\xbb\xe7\x97\x1d\xfd\x55\xfc\x7f\x6f\xf9\x26\xe0\x8e\x5f\x4a\x59\xde\x13\xf4\x82\xeb\x81\x2d\x29\xcb\x2f\x05\x5a\xf7\x46\x79\xa1\x75\x74\xd9\xf2\x05\x07\x4e\x82\xc7\xef\x9e\x6f\xd3\xc6\x7e\x08\x38\x8c\xcb\x92\x0f\xda\xb4\xa0\x6f\x19\x01\x43\xd3\x20\x98\x9e\xfa\x25\x54\x14\x7c\x13\x02\x4e\x13\xb6\xcb\x70\xe4\x34\x14\x1c\x7c\x16\xfb\x20\xdd\x63\x6e\x85\x48\x65\xee\xcd\x80\x9d\x5a\xe9\xfc\x4d\xb8\x30\x2c\xf3\xc9\x9e\x59\x63\x4c\x4b\xac\x33\xf4\xb5\xc8\x67\xd5\x88\x3c\x3b\xfe\x85\xd9\x96\x67\xc7\xef\x17\x14\x8f\x53\xdd\x84\x53\x54\x4b\xd6\xc7\xbc\xa2\x4a\xe4\xd9\xab\x52\xe9\x27\x02\x7b\x45\xb2\xb6\xcb\xc8\x08\x44\x4c\xd9\x50\xf6\xd0\xc3\x60\xdb\xdf\x80\x7b\x9d\x7d\x67\x25\xf8\x3c\xa5\xf1\x3d\x74\x16\x44\x58\x0b\x9b\xc3\x01\xb0\x3d\xfa\x43\x28\x7e\xec\x47\xe0\xd8\xf1\x08\xee\xb9\xa1\x22\x15\xf8\xbc\xf6\x94\x74\x53\x39\x75\xef\x55\x50\x9e\xfb\x0c\x54\x7d\xef\x82\xb6\xeb\x35\xc8\x39\x33\x81\xbf\xb9\xe8\x58\xbc\x5e\xb9\xdb\x0a\xda\xce\x3f\x61\x39\x7d\x9f\xdb\xff\x1e\x6c\x18\xb9\x0e\x39\x43\x9f\x00\xd7\xf1\x2a\x6c\x7c\xe6\xf7\xc9\xb7\xdb\x70\x17\x68\x9e\x7f\x03\xd4\x3d\x57\xc0\x13\xf4\xcd\x69\x27\xd5\x57\x1c\xdf\x2f\xc3\x85\xdf\x42\x8e\xea\x9e\xab\xb0\x69\xcb\xb7\x81\xe8\xd7\x62\x39\xdd\x9b\x84\x9f\xbe\x88\x9c\x52\xd1\x4f\xcf\x1c\x54\xb6\x6c\xeb\xf6\x45\xeb\x95\xee\xae\x01\xe5\xc8\x75\xf0\xfa\x5d\x0b\xde\x55\xe4\xdf\x83\xfc\x53\xd1\x6f\xdf\x55\x89\x36\x0c\x59\x72\x17\xad\x57\xd0\x70\x12\xd4\xdd\xe3\x09\xdf\xe7\x1f\x3a\x95\x92\xfe\xd2\xef\xd6\xa2\xfe\xd9\x33\x52\x42\xfd\x07\xbb\x16\xfd\x7e\x51\x6d\x8b\x24\xfa\x03\x76\x3d\x08\xc7\x2e\x40\xde\xa9\x37\x25\xd1\xef\x26\x04\x8c\x4d\x83\x08\xcb\x13\x3f\x91\xcc\xfe\xa9\x42\xd6\x2f\xb1\xfe\x3d\x8f\xc7\xf4\x17\x2c\xad\x5f\xdb\xf9\xe7\xb4\xeb\x2f\xdb\xba\x0d\xd7\x3f\xaf\xd7\xb1\x68\x3d\x6b\x75\x23\xe4\x0c\x7e\x84\xfb\x54\x3a\xf5\xd3\xbd\x2b\x67\x68\x12\x0c\xcd\x67\x81\x18\xd6\x25\xac\x47\xf7\x42\xba\xfe\x16\xd5\x36\xa7\xbf\x0f\x76\x57\xe3\xb7\xa9\x7d\xad\x35\x3f\x86\x92\x7d\x4f\x42\x51\xdd\x51\xf4\x15\xfd\x0e\x53\xbc\x9e\xf9\xfb\xed\xb1\x3d\xf1\xc4\xcb\x60\xad\x3e\x0c\xb6\xfd\x07\xa0\xf0\xc0\xcf\x81\xeb\x78\x65\x81\xdf\x95\x2c\xdc\xa4\x02\x0c\xcd\xc3\x90\xd7\xfd\x77\xc8\xeb\x1e\x47\x3f\xb8\xb8\xf2\x10\xfa\xce\x73\xeb\x39\xb7\xef\x06\x7d\xdb\x79\xc8\x7b\xfe\x0d\xf4\x85\x0d\x2d\xc3\xe0\xd8\xb1\x0f\xf7\xd1\x74\xdb\x45\x86\x8c\x74\x80\xf0\xec\xe7\x44\x60\xdf\x92\x8c\x03\xcf\xfe\x03\x7d\x40\x89\xf4\x47\x78\x45\x15\xfa\xc0\x3c\x5b\x2b\x95\xff\xbd\xd2\x38\x43\xa6\x3f\xd9\x0c\xc3\x28\x19\x86\x11\x97\x8e\x93\x30\x5e\xd5\x2d\x5f\x25\xba\x3b\x22\x22\xcf\xfe\x86\x08\xec\x47\x52\xcf\x9f\x45\xe6\xd5\x27\x22\xc7\x5e\x14\x75\x8a\x07\xbc\xba\xaf\x7f\x8d\x72\x77\xa8\x6e\xbb\x99\x70\x8a\xa7\x44\x81\x9d\x94\x9a\xdf\xf2\xc7\x69\xd6\x34\xe1\x15\xd1\x98\xdd\x6f\x0f\xac\x2c\x26\x27\x5d\x1b\x68\x3f\x10\x81\x1d\x93\x9c\x4b\xca\x6d\x60\x5f\xc6\x31\x25\x35\x8f\x14\x91\xc9\xdc\x65\xc8\x90\xf1\xff\x07\xa2\x5f\x87\x31\x48\xd3\xe1\x3e\x8c\x2f\x68\x3b\x5f\x43\x3f\x94\x3f\x7e\x09\xe3\x49\x6e\x12\x59\x10\x03\x8e\xcb\x0a\x59\x50\xbe\xc9\x8c\x3e\xb1\xae\xfd\xb7\xa0\xe9\x7a\x1d\xc1\x1d\xbb\x08\xb6\x47\x7e\x00\xe1\xc2\x0d\x10\x31\x7d\x03\x9c\xdb\x76\x81\x4b\xbc\x3f\xbd\xbc\xe3\xb1\xd7\x0b\xe8\x3b\x53\xbf\x58\x79\x76\x1a\x72\x4f\xff\x0b\x72\x07\x3e\x40\x9f\x7e\xb6\x5c\xd5\x73\x05\xef\x71\xe7\xca\x06\x6d\x5a\x30\x3f\x19\x85\x9c\xc1\x8f\x63\xb2\x23\xd7\x30\x8e\xac\x3c\x3b\x85\xf1\x90\x58\x2c\xfa\x1d\xbc\x0b\xa6\x75\xf4\xcd\x43\x69\xe5\x1f\x2c\xd1\xa1\x8f\x4d\xf5\xe4\x0e\xbc\x0f\xc6\xc6\x01\xb4\x99\x73\xfb\x2e\x70\x6e\xfb\x0e\x94\xec\x7d\x02\xed\xaf\x6f\xfb\x35\xfa\xda\x2e\x12\x89\xcb\xfa\x9d\x26\xe0\x8f\x5d\x88\xc5\xc1\x87\x26\x31\xfe\x6c\xad\x7a\x1a\x4a\xf7\xd4\x80\x6d\x5f\x3d\x14\xd6\x47\x31\x86\x4e\xdb\x84\x6d\x3b\xf7\x19\xe8\x9b\xd2\xc7\x9f\xe8\xd7\xa2\x5d\xd0\xde\x67\x26\xc0\xbe\xab\x0a\x63\xd0\x37\xf6\x0f\xd1\xdf\x89\x71\xa5\x50\xb1\x06\x22\xc6\xf5\x58\x4e\xff\x5a\xea\xda\x40\x39\xfc\x29\xc6\xf0\x4b\xf7\xd4\x62\x6c\x7d\xee\x18\x23\x86\x75\xe0\x77\x18\x81\x8b\xbe\xb4\x2a\xfc\x2b\x0a\xef\x03\x7d\xf3\x30\x7e\xd7\xd0\x34\x94\x70\x7c\xff\x27\xd0\xb6\x68\x9e\xfb\x1b\x8e\x2d\x4b\x5d\xeb\xe2\x7d\x6c\xdb\x08\xb9\x7d\xef\xa6\x9d\x7f\xc8\xaa\x06\x6d\xd7\xeb\x38\x4e\x5d\x84\x24\x25\xeb\xf1\x95\xc5\xfa\xad\xff\x7d\x08\x5b\x72\x96\xac\x4f\xdb\x98\x6e\xfe\xd4\x2e\xaa\xde\xb7\x91\x7f\xd0\xa6\x4b\x4a\x76\xd3\x83\x5b\x50\x8e\xae\x37\xcb\xa9\x5f\xf6\xe0\xd6\xd5\xe1\xff\xc2\x3f\x63\xfc\x8b\x35\x49\xf3\x4f\x86\x4f\xb9\xdb\x0a\xca\xe1\x6b\x19\xc5\x9f\x08\x6b\xf1\x5e\xc4\x13\xf2\x81\x63\xc7\x5e\x5c\x87\x32\x89\x7f\x45\xc1\xbd\x78\x9f\xa5\xea\x7f\x0f\xf7\x13\x3a\xd7\x33\x89\x3f\x5d\x1f\x74\x3f\x7b\x15\xef\xa4\x66\x51\xd0\xd0\x99\x31\xfc\x89\xe1\x2e\x28\x77\x59\xf0\xfe\x75\x16\xc1\x12\x2e\x63\xf8\xaf\x36\x64\xfe\x32\x7f\x99\x7f\x26\xf3\xd7\x82\xba\xe7\xad\x18\x7f\x6b\x5e\x4a\xfc\xb9\xe8\x65\xc9\xf8\x87\x8a\x54\xa0\x3d\xf9\x47\xe4\x91\xec\xf9\xd3\xeb\x75\x82\x72\x78\x1a\x7d\xb2\x88\x61\xbd\x24\xfc\xf1\xfc\xdf\x72\x0e\xf9\x1b\x0f\xf7\x26\x75\x77\x49\xfb\x4b\xf3\x8b\xd8\xf9\xbf\xec\xa1\x87\x25\xe1\x3f\xcf\xff\x3a\xfd\x21\x94\xee\xdc\xbf\xec\xbc\xd6\x88\xf1\x6e\x30\xd7\x47\x91\xbf\xfa\xd4\x9b\xe0\x09\x6c\x96\x66\x0c\x59\xd5\xc0\x1f\x7f\x09\x79\x50\xff\x3a\xbf\xa1\x13\xdc\xe1\x20\x94\xbb\x8a\x70\xef\xf7\x79\xec\x50\xba\xb3\x12\xf3\xa7\xfd\x37\xe4\xff\x7a\x7d\x65\xa0\x79\xee\xaf\xd8\x7f\xea\xde\xb7\x31\xf7\xc7\xe3\x77\xe3\x59\x99\x9e\x15\x36\x87\x03\xe8\x63\x1a\x1b\xfb\x16\xbd\xd3\x5f\x29\x28\x4f\xe3\x91\x01\xc8\x39\xf3\xe1\x4c\x0c\xe1\x7a\x2c\x2f\x6d\xe0\x03\x1c\xe3\x74\x7e\xab\x5e\x78\x67\x41\x6e\x17\xc1\xfb\xf6\x08\xf0\x27\xc6\xb0\x1e\x95\xdd\x30\x72\x0d\xed\x80\x71\x0b\xfa\xad\xe1\x4f\x61\xe3\x33\x7f\xc0\xb9\xb6\xaa\x73\x21\xff\x1e\xf0\xfa\x9c\x68\x2f\xee\xc4\x18\xe6\xd7\xd1\xb3\xa3\xe9\x50\x37\xd8\x77\x3c\x0a\x01\xbb\x90\x30\xb7\x20\x6c\x56\x62\x8e\xbc\xb9\xbe\x1d\xf3\xf4\x74\x1d\xbf\xc3\x1c\x70\x4b\x6d\x33\x96\x87\x8a\x72\xe3\x79\x72\x32\x64\xc8\x90\x21\x63\xf5\x40\x78\xf6\x73\xf1\xbf\x38\x5f\x60\x69\xfe\x8a\x09\xc2\x2b\x5e\x94\x9a\x47\xca\xe0\xd8\x8b\x22\xaf\x70\x8b\x3c\xfb\xb1\xe4\x5c\x92\x06\x3b\x19\xe1\xee\x08\x3b\x54\xb7\xdd\x1c\xe1\x14\x4f\x67\x6a\xfe\xc6\x9c\x1c\x94\xcd\x22\xcf\x8e\x12\x21\x6b\x42\x72\x7e\x09\x30\x93\x3f\x73\x3e\xc2\xdf\x5e\xee\xbd\xf7\xd6\xaf\x7c\x41\xa9\x48\xf2\xf3\x3f\xfc\xfc\x3b\x00\x00\xff\xff\x1a\xc1\xfd\x69\x2e\x3c\x00\x00")

func dataFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_dataFaviconIco,
		"data/favicon.ico",
	)
}

func dataFaviconIco() (*asset, error) {
	bytes, err := dataFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/favicon.ico", size: 15406, mode: os.FileMode(420), modTime: time.Unix(1574793068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/checkmark-32x32.png":   dataCheckmark32x32Png,
	"data/crossmark-32x32.png":   dataCrossmark32x32Png,
	"data/exclamation-32x32.png": dataExclamation32x32Png,
	"data/favicon.ico":           dataFaviconIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"checkmark-32x32.png":   &bintree{dataCheckmark32x32Png, map[string]*bintree{}},
		"crossmark-32x32.png":   &bintree{dataCrossmark32x32Png, map[string]*bintree{}},
		"exclamation-32x32.png": &bintree{dataExclamation32x32Png, map[string]*bintree{}},
		"favicon.ico":           &bintree{dataFaviconIco, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
